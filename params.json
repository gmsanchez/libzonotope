{"name":"Libzonotope","tagline":"","body":"\r\nlibzonotope README\r\n==================\r\n\r\nThis is a collection of scripts and algorithms for zonotope\r\nmanipulations. The most interesting functions are the generic C++\r\nalgorithms implemented in the header files in the `include/`\r\nsubdirectory of this project.\r\n\r\nA zonotope is a convex polytope that is the Minkowski sum of line\r\nsegments. We write\r\n\r\n    Z(V) := [0,v_0] + ... + [0,v_{n-1}]\r\n\r\nfor the Minkowski sum of the line segments `[0,v_i]`, `i=0..n-1`,\r\nwhere `V=[v_0 .. v_{n-1}]` is the `d√ón` matrix with columns `v_i`, and\r\n`0` is the origin in `d` dimensions.\r\n\r\n\r\nFeatures\r\n--------\r\n\r\nIn its current state, the project should be considered no more than a \r\nproof of concept. For more sophisticated vertex enumeration, we recommend\r\n[MinkSum][1]. The main reason someone might use the library right now\r\nis its small size, and the control it gives over the components used\r\nin its algorithms. We currently provide implementations that depend on the\r\n[linear programming solver][3] from [CGAL](http://cgal.org), but\r\nit's fairly easy to adapt the code to a different solver.\r\n\r\n\r\nThe main files are:\r\n\r\n- `include/combination_traversal.cpp`: A generic combination traversal\r\n  algorithm for lexicographical traversal of combinations. Currently\r\n  lacking is a proper definition of the concept\r\n  `Combination_container`, though it's already implemented in\r\n  `Combination_kernel_container<NT>`.\r\n\r\n- `include/combination_kernel_container.hpp`: A combination container\r\n  that implements incremental kernel updates.\r\n\r\n- `include/zonotope_output_functor.hpp`: An example output functor for\r\n  the combination traversal that constructs the H-representation of\r\n  the zontope. The functor accepts all combinations, but forwards only\r\n  the (d-2)-combinations it accepts to `handle_event_points` which\r\n  generates a batch of halfspaces.\r\n  \r\n- `include/event_point_2.hpp`: Implements the function\r\n  `handle_event_points`, which generates a batch of halfspaces in time\r\n  O(n*log(n)).\r\n  \r\n- `zonotope_halfspaces.hpp`: Outputs the H-represenation by combining\r\n  the appropriate output functor and combination container with the\r\n  combination traversal algorithm.\r\n\r\n- `include/linalg.hpp`: Implements in particular the function\r\n  `update_kernel` for efficient kernel updates (used in\r\n  `Combination_kernel_container`).\r\n  \r\n- `include/reverse_search.hpp`: Implements a completely generic\r\n  [reverse search algorithm][2] by Avis and Fukuda,\r\n  using functors for adjacency checks and local search.\r\n\r\n- `include/cell_enum.hpp`: Implements the functors for reverse search\r\n  to perform cell enumeration in arrangements, and a wrapper function\r\n  that finds a root cell. By providing an appropriate output functor,\r\n  this can be used for vertex enumeration in zonotopes. This algorithm\r\n  is also from the [original reverse search paper by Avis and Fukuda][2].\r\n\r\n- `include/vertex_enum.hpp`: Implements vertex enumeration in\r\n  zonotopes using depth-first-search in the dual arrangement with\r\n  manual stack management, for comparison with reverse search (it can\r\n  be concluded that we need to improve our implementation of reverse\r\n  search).\r\n  \r\n[1]: https://sites.google.com/site/christopheweibel/research/minksum\r\n[2]: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.4487\r\n[3]: http://doc.cgal.org/latest/QP_solver/index.html\r\n\r\nTODO\r\n----\r\n\r\n- Special functions for two dimensions (i.e. **zonogons**).\r\n\r\n- Implement `O(n^{d-1}\\log{n})` general position vertex enumeration.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}